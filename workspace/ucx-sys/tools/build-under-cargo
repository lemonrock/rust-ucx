#!/usr/bin/env sh
# This file is part of ucx. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/ucx/master/COPYRIGHT. No part of ucx, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of ucx. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/ucx/master/COPYRIGHT.


# This script exists because doing complex builds of non-Rust code under Cargo is tedious and error-prone
# Not least because Cargo does not display stdout and stderr 'as it goes'
# This script exists to allow testing of the build without running Cargo


set -e
set -u
set -f


_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

build_under_cargo_fail()
{
	local message="$1"

	printf 'build-under-cargo:FAIL:%s\n' "$message" 1>&2
	exit 1
}

build_under_cargo_compile()
{
	"$CARGO_MANIFEST_DIR"/tools/compile
}

build_under_cargo_generatingRustBindings()
{
	"$CARGO_MANIFEST_DIR"/tools/bindgen-wrapper/bindgen-wrapper
}

build_under_cargo_outputCargoKeyValuePairs()
{
	_build_under_cargo_outputCargoKeyValuePairs_rerun_if_changed_recurse()
	{
		local relativeRoot="$1"

		set +f
		local file
		for file in "$relativeRoot"/*
		do
			set -f

			if [ ! -e "$file" ]; then
				continue
			fi

			case "$file" in

				"$relativeRoot"/.gitignore|"$relativeRoot"/temporary)
					continue
				;;

			esac

			if [ -L "$file" ]; then
				printf 'cargo:rerun-if-changed=%s\n' "$file"
			elif [ -f "$file" ]; then
				printf 'cargo:rerun-if-changed=%s\n' "$file"
			elif [ -d "$file" ]; then
				printf 'cargo:rerun-if-changed=%s\n' "$file"
				_build_under_cargo_outputCargoKeyValuePairs_rerun_if_changed_recurse "$file"
			fi
		done
		set -f
	}

	cd "$CARGO_MANIFEST_DIR" 1>/dev/null 2>/dev/null

		_build_under_cargo_outputCargoKeyValuePairs_rerun_if_changed_recurse 'bindgen-wrapper.conf.d'
		_build_under_cargo_outputCargoKeyValuePairs_rerun_if_changed_recurse 'compile.conf.d'

	cd - 1>/dev/null 2>/dev/null

	printf 'cargo:rerun-if-changed=%s\n' 'tools/build-under-cargo'
	printf 'cargo:rerun-if-changed=%s\n' 'tools/compile'
	printf 'cargo:rerun-if-changed=%s\n' 'tools/bindgen-wrapper'
	printf 'cargo:rerun-if-changed=%s\n' 'tools/bindgen-wrapper/bindgen-wrapper'
	printf 'cargo:rerun-if-changed=%s\n' 'tools/bindgen-wrapper/rustfmt.toml'


	printf 'cargo:rustc-link-lib=static-nobundle=ucm\n'
	printf 'cargo:rustc-link-lib=static-nobundle=ucs\n'
	printf 'cargo:rustc-link-lib=static-nobundle=ucp\n'
	printf 'cargo:rustc-link-lib=static-nobundle=uct\n'
}

build_under_cargo_steps()
{
	if [ ! -d "$CARGO_MANIFEST_DIR"/bindgen-wrapper.conf.d/temporary/usr/lib ]; then
		build_under_cargo_compile
	fi

	if [ ! -e "$CARGO_MANIFEST_DIR"/src/bindgen/lib.rs ]; then
		build_under_cargo_generatingRustBindings
	fi

	build_under_cargo_outputCargoKeyValuePairs
}

build_under_cargo_main()
{
	case "$#" in

		0)
			:
		;;

		1)
			case "$1" in

				-h|--help)
					printf './build\n'
					printf './build -h|--help\n'
					exit 0
				;;

				*)
					build_under_cargo_fail "Does not take any arguments"
				;;

			esac
		;;

		*)
			build_under_cargo_fail "Does not take any arguments"
		;;

	esac

	local programPath="$(_program_path_find)"
	cd "$programPath"/.. 1>/dev/null 2>/dev/null
		local homeFolder="$(pwd)"
	cd - 1>/dev/null 2>/dev/null

	if [ -z "${CARGO_MANIFEST_DIR+is_unset}" ]; then
		export CARGO_MANIFEST_DIR="$homeFolder"
		printf 'build-under-cargo:%s\n' "Whilst this script (build-under-cargo) is designed to be run under cargo, it can run independently. We're setting CARGO_MANIFEST_DIR to '$CARGO_MANIFEST_DIR'" 1>&2
	else
		:
	fi

	if [ -z "${OUT_DIR+is_unset}" ]; then
		export OUT_DIR="$homeFolder"/bindgen-wrapper.conf.d/temporary
		printf 'build-under-cargo:%s\n' "Whilst this script (build-under-cargo) is designed to be run under cargo, it can run independently. We're setting OUT_DIR to '$OUT_DIR'" 1>&2
	else
		:
	fi

	build_under_cargo_steps
}

build_under_cargo_main "$@"
